{"version":3,"sources":["components/infoCard/infoBottom/InfoBottom.jsx","components/infoCard/infoHeader/InfoHeader.jsx","components/infoCard/card.jsx","components/controls/staticController/StaticController.jsx","components/controls/layoutController/LayoutController.jsx","index.js","config.js","App.jsx","components/map/Map.jsx","components/timeslider/timeSlider.jsx","components/charts/secondary_chart/secondary_chart.jsx","components/charts/main_chart/main_chart.jsx"],"names":["InfoBottom","data","image","label","id","unit","useState","name","x","y","info_capita","info","series","setSeries","options","chart","sparkline","enabled","background","colors","fill","type","gradient","inverseColors","opacityFrom","opacityTo","stops","colorStops","offset","color","theme","mode","plotOptions","bar","horizontal","barHeight","borderRadius","distributed","dataLabels","size","hideOverflowingLabels","textAnchor","formatter","val","Object","values","reduce","a","b","toFixed","style","stroke","show","tooltip","followCursor","fillSeriesColor","value","xaxis","categories","grid","padding","right","noData","text","useEffect","every","obj","undefined","className","src","alt","height","InfoHeader","props","activeCountry","countryName","setCountry","isoCode","setIsoCode","yearCountry","setYear","populationCountry","setPopulation","gdpCountry","setGDP","countrySelected","country","iso_code","year","population","gdp","Math","floor","changeInfoNation","Typography","icon","label_formatter","cement_co2","coal_co2","gas_co2","oil_co2","other_industry_co2","flaring_co2","InfoCard","animations","easing","speed","animateGradually","delay","dynamicAnimation","palette","shade","shadeIntensity","gradientToColors","pie","minAngleToShowLabel","donut","width","labels","keys","filter","key","includes","map","push","nitrous_oxide","nitrous_oxide_per_capita","methane","methane_per_capita","energy","energy_per_capita","StaticController","toggleLayout","callback","onClick","LayoutController","infoCardLayout","bottomCardLayout","setInfoCardLayout","setBottomCardLayout","setInfoCardHeightController","opposite","ReactDOM","render","StrictMode","document","getElementById","module","exports","global","config","api_url","iconList","Icons","App","isLoading","setIsLoading","dataError","setDataError","activeYear","setActiveYear","yearData","setYearData","setActiveCountry","infoCardHeightController","axios","get","params","strict","headers","then","res","sort","catch","err","console","log","yearMap","infoState","countryClicked","changeYear","library","add","colorScale","scaleLinear","domain","range","interpolate","interpolateCubehelixLong","gamma","MapChart","projectionConfig","scale","length","center","geography","geographies","geo","current","find","s","properties","ISO_A3","onMouseEnter","default","co2","outline","strokeOpacity","strokeWidth","transition","hover","cursor","pressed","rsmKey","TimeSlider","timeout","sx","defaultValue","valueLabelDisplay","step","marks","min","max","onChange","event","clearTimeout","setTimeout","updateValue","share_global_cement_co2","share_global_coal_co2","share_global_gas_co2","share_global_oil_co2","share_global_other_co2","text_color","seriesName","SecondaryChart","toolbar","fontSize","yaxis","showForNullSeries","legend","fontFamily","variant","trade_co2","consumption_co2","MainChart","cleanData","dynamic_variance_avg_trade_co2","useMemo","abs","dynamic_variance_trade_co2","variance_tolerant_trade_co2","pV","cV","dynamic_variance_avg_consumption_co2_trade_co2","dynamic_variance_consumption_co2_trade_co2","variance_tolerant_consumption_co2_trade_co2","slice","dataFormatted","avg","offsetY","round","customLegendItems"],"mappings":"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","file":"static/js/main.dafc462c.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport \"./InfoBottom.css\"\nimport Chart from \"react-apexcharts\";\n\n/**\n * Component placed on the bottom part of InfoCard. Used to display nitrous oxide, methane and energy\n * @param data\n * @param image\n * @param label\n * @param id\n * @returns {null|JSX.Element}\n */\nconst InfoBottom = ({data, image, label, id}) => {\n    const unit = label === 'Energy' ? \"kWh\" : \"m3\";\n    const [series, setSeries] = useState([\n        {\n            name: `${label} per Capita`,\n            data: [\n                {\n                    x: `${label} per Capita`,\n                    y: data.info_capita\n                }\n            ]\n        },\n        {\n            name: label,\n            data: [\n                {\n                    x: label,\n                    y: data.info\n                }\n            ]\n        }\n    ]);\n    const options = {\n        chart: {\n            sparkline: {\n                enabled: true\n            },\n            background: 'transparent',\n        },\n        colors: ['#ff4560', '#775dd0'],\n        fill: {\n            type: 'gradient',\n            gradient: {\n                type: 'diagonal1',\n                inverseColors: true,\n                opacityFrom: 1,\n                opacityTo: .65,\n                stops: [0, 100],\n                colorStops: [\n                    {\n                        offset: 0,\n                        color: 'rgba(255, 69, 96, 0.8)'\n                    },\n                    {\n                        offset: 100,\n                        color: 'rgba(119, 93, 208, 0.2)'\n                    }\n                ]\n            }\n        },\n        theme: {\n            mode: 'dark',\n        },\n        plotOptions: {\n            bar: {\n                horizontal: true,\n                barHeight: '50%',\n                borderRadius: 15,\n                distributed: true,\n                dataLabels: {\n                    size: '50%',\n                    background: 'transparent',\n                    hideOverflowingLabels: true,\n                },\n            }\n        },\n        dataLabels: {\n            enabled: true,\n            textAnchor: 'middle',\n            formatter: val => val > Object.values(data).reduce((a, b) => (a ?? 0) + (b ?? 0), 0) / 6 ? val.toFixed(2) + ` ${unit}` : '', //Format the value diplayed to 2 number after the comma if the value is too long\n            style: {\n                colors: ['whitesmoke']\n            },\n        },\n        stroke: {\n            show: true,\n        },\n        tooltip: {\n            show: true,\n            followCursor: true,\n            fillSeriesColor: true,\n            theme: \"dark\",\n            x: {\n                show: false\n            },\n            y: {\n                formatter: function (value) {\n                    return `${value.toFixed(2)} ${unit}`\n                }\n            },\n        },\n        xaxis: {\n            categories: [label] // [label, `${label} per Capita`],\n        },\n        grid: {\n            padding: {\n                right: 20\n            }\n        },\n        noData: {\n            text: 'No data available',\n        }\n    }\n\n    useEffect(() => {\n        setSeries([\n            {\n                name: `${label} per Capita`,\n                data: [{\n                    x: `${label} per Capita`,\n                    y: data.info_capita\n                }]\n            },\n            {\n                name: label,\n                data: [{\n                    x: label,\n                    y: data.info\n                }]\n            }])\n    }, [data.info, data.info_capita, id, label])\n\n    return Object.values(data).every((obj) => obj === undefined) ? null : (\n        <div className={`visual-data visual-data-${id}`}>\n            <div className='visual-icon-wrapper'>\n                <img className='visual-icon' src={image} alt={label}/>\n            </div>\n            <div className={`sparkline-wrapper`}>\n                <Chart\n                    id={`sparkline-${id}`}\n                    className='sparkline-chart'\n                    options={options}\n                    series={series}\n                    type=\"bar\"\n                    height='100%'\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default InfoBottom\n\n","import React, {useEffect, useState} from 'react';\nimport './InfoCountry.css'\nimport {Typography} from \"@mui/material\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n/**\n * The header component of InfoCard. It shows some general info, such as the country gdp and population\n * @param props (must contain country, iso_code, year, population and GDP)\n * @returns {JSX.Element}\n */\nconst InfoHeader = (props) => {\n\n    const {activeCountry} = props\n\n    const [countryName, setCountry] = useState('')\n    const [isoCode, setIsoCode] = useState('')\n    const [yearCountry, setYear] = useState('')\n    const [populationCountry, setPopulation] = useState('')\n    const [gdpCountry, setGDP] = useState('')\n\n    const changeInfoNation = (countrySelected) => {\n\n        let {country, iso_code, year, population, gdp} = countrySelected\n\n        country = country ? country : 'No data'\n        iso_code = iso_code ? iso_code : 'No data'\n        year = year ? year : 'No data'\n        population = population ? `${Math.floor(population / 1000000)} M` : 'No data'\n        gdp = gdp ? `${Math.floor(gdp / 1000000000)} B` : 'No data'\n\n        setCountry(country)\n        setIsoCode(iso_code)\n        setYear(year)\n        setPopulation(population)\n        setGDP(gdp)\n    }\n\n\n    useEffect(() => {\n        changeInfoNation(activeCountry)\n    }, [activeCountry])\n\n    return (\n        <div className=\"header\">\n            <div className=\"header-title\">\n                <span className='title-text'>{countryName}</span>\n            </div>\n            <Typography className='data-item'>\n                <FontAwesomeIcon icon=\"globe\" className='data-icon'/>\n                <span className='data-text'>{isoCode}</span>\n            </Typography>\n            <Typography className='data-item'>\n                <FontAwesomeIcon icon=\"calendar-alt\" className='data-icon'/>\n                <span className='data-text'>{yearCountry}</span>\n            </Typography>\n            <Typography className='data-item'>\n                <FontAwesomeIcon icon={['fas', 'users']} className='data-icon'/>\n                <span className='data-text'>{populationCountry}</span>\n            </Typography>\n            <Typography className='data-item'>\n                <FontAwesomeIcon icon={['fas', 'dollar-sign']} className='data-icon'/>\n                <span className='data-text'>{gdpCountry}</span>\n            </Typography>\n        </div>\n    )\n}\n\nexport default InfoHeader","import React, {useEffect, useState} from 'react';\nimport Chart from 'react-apexcharts'\nimport './card.css'\nimport '../../config';\nimport InfoBottom from \"./infoBottom/InfoBottom\";\nimport InfoHeader from \"./infoHeader/InfoHeader\";\n\nconst label_formatter = {\n    cement_co2: \"Cement\",\n    coal_co2: \"Coal\",\n    gas_co2: \"Gas\",\n    oil_co2: \"Oil\",\n    other_industry_co2: \"Other\",\n    flaring_co2: \"Flaring\",\n}\n/**\n *  InfoCard component placed on the upper left side.\n * @param data (Data aboutthe nation you clicked in certain year)\n * @returns {JSX.Element}\n */\nconst InfoCard = ({data}) => {\n\n    const [series, setSeries] = useState([]);\n\n    const options = {\n        chart: {\n            id: 'co2-parts-chart',\n            animations: {\n                enabled: true,\n                easing: 'easeinout',\n                speed: 400,\n                animateGradually: {\n                    enabled: true,\n                    delay: 550\n                },\n                dynamicAnimation: {\n                    enabled: true,\n                    speed: 1000\n                }\n            },\n            background: 'transparent',\n        },\n        theme: {\n            mode: 'dark',\n            palette: 'palette1',\n        },\n        fill: {\n            type: 'gradient',\n            gradient: {\n                shade: 'light',\n                type: 'vertical',\n                shadeIntensity: 0,\n                gradientToColors: undefined,\n                inverseColors: true,\n                opacityFrom: 1,\n                opacityTo: .7,\n                stops: [0, 100],\n                colorStops: []\n            }\n        },\n        plotOptions: {\n            pie: {\n                dataLabels: {\n                    minAngleToShowLabel: 45\n                },\n                donut: {\n                    size: '35%',\n                    background: 'transparent',\n                }\n            }\n        },\n        stroke: {\n            width: 0,\n            colors: ['#fff']\n        },\n        labels: Object.keys(data).filter(key => Object.keys(label_formatter).includes(key)).map(key => label_formatter[key]) //return an array of CO2 parts available\n    }\n    useEffect(() => {\n        //return array of CO2 parts values which are available\n        setSeries(Object.keys(label_formatter).reduce((values, key) => {\n            if (data[key] !== undefined)\n                values.push(data[key]);\n            return values;\n        }, []));\n    }, [data]);\n\n    return (\n        <div className=\"card-container\">\n            <InfoHeader\n                activeCountry={data}\n            />\n            <div className=\"co2-parts-chart-container\">\n                <Chart\n                    id=\"co2-parts-chart\"\n                    options={options}\n                    series={series}\n                    type=\"donut\"\n                    height=\"100%\"\n                />\n            </div>\n            <div className=\"card-bottom\">\n                <InfoBottom\n                    data={[data].map((obj) => {\n                        return {info: obj.nitrous_oxide, info_capita: obj.nitrous_oxide_per_capita}\n                    })[0]}\n                    image=\"./media/nitrogen.svg\"\n                    label=\"Nitrous oxide\"\n                    id=\"1\"\n                />\n                <InfoBottom\n                    data={[data].map((obj) => {\n                        return {info: obj.methane, info_capita: obj.methane_per_capita}\n                    })[0]}\n                    image=\"./media/methane.svg\"\n                    label=\"Methane\"\n                    id=\"2\"\n                />\n                <InfoBottom\n                    data={[data].map((obj) => {\n                        return {info: obj.energy, info_capita: obj.energy_per_capita}\n                    })[0]}\n                    image=\"./media/energy.svg\"\n                    label=\"Energy\"\n                    id=\"3\"\n                />\n            </div>\n\n        </div>\n    );\n}\n\nexport default InfoCard","import React from \"react\";\nimport \"./StaticController.css\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\n/**\n * Controller used to handle the appearance and the disappearance of InfoCard and bottom charts.\n * @param type (the icon you want to show)\n * @param toggleLayout\n * @param callback\n * @returns {JSX.Element}\n */\nconst StaticController = ({type, toggleLayout, callback}) => {\n    return (\n        <FontAwesomeIcon\n            className=\"layoutControllers\"\n            icon={[\"fa\", type]} // correct way to assign icons\n            onClick={() => {\n                toggleLayout();\n                if (callback !== undefined) callback()\n            }}\n        />\n    )\n}\n\nexport default StaticController","import React from 'react';\nimport './LayoutController.css';\nimport StaticController from \"../staticController/StaticController\";\n\n/**\n * Layout containing InfoCard, bottom charts and toggle controllers\n * @param infoCardLayout (contain the collapse css class)\n * @param bottomCardLayout (contain the collapse css class)\n * @param setInfoCardLayout\n * @param setBottomCardLayout\n * @param setInfoCardHeightController (setter for the force-full-height css class)\n * @returns {JSX.Element}\n */\nconst LayoutController = ({\n                              infoCardLayout,\n                              bottomCardLayout,\n                              setInfoCardLayout,\n                              setBottomCardLayout,\n                              setInfoCardHeightController\n                          }) => {\n    return (\n        <div className={\"layout-controls \" + (bottomCardLayout ? \"shown-layout-controls\" : null)}>\n            <StaticController\n                type=\"arrows-left-right\"\n                toggleLayout={() => setInfoCardLayout(!infoCardLayout ? 'collapse' : null)}\n            />\n            {infoCardLayout === bottomCardLayout ?\n                <StaticController\n                    type={infoCardLayout ? \"fa-expand\" : \"fa-compress\"} // infoCardLayout is equal to bottomCardLayout\n                    toggleLayout={() => {\n                        const opposite = !infoCardLayout ? 'collapse' : null;\n                        setInfoCardLayout(opposite);\n                        setBottomCardLayout(opposite);\n                    }}\n                /> : null}\n            <StaticController\n                type=\"arrows-up-down\"\n                toggleLayout={() => {\n                    setBottomCardLayout(!bottomCardLayout ? 'collapse' : null)\n                    !bottomCardLayout ? setInfoCardHeightController('force-full-height') : setInfoCardHeightController('');\n                }}\n            />\n        </div>\n    )\n}\n\nexport default LayoutController;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n","module.exports = global.config = {\n    api_url: 'https://inquinapi.derpi.it/api/',\n    //api_url: 'http://hub:44003/api/',\n    // api_url: 'http://192.168.182.69/api/'\n};","import \"./App.css\";\nimport React, {useEffect, useState} from \"react\";\nimport Map from \"./components/map/Map\";\nimport TimeSlider from \"./components/timeslider/timeSlider\";\nimport axios from \"axios\";\nimport Card from \"./components/infoCard/card\";\nimport SecondaryChart from \"./components/charts/secondary_chart/secondary_chart\";\nimport './config';\n\n// code for icon handling and registering to allow global use\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport * as Icons from '@fortawesome/free-solid-svg-icons';\nimport LayoutController from \"./components/controls/layoutController/LayoutController\";\nimport MainChart from \"./components/charts/main_chart/main_chart\";\n\nconst iconList = Object.keys(Icons)\n    .filter((key) => key !== 'fa' && key !== 'prefix')\n    .map((icon) => Icons[icon]);\n\nlibrary.add(...iconList);\n\n// end of icon handling\n\nexport default function App() {\n    // TODO Create map legend and add reference to OWID as data source\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [dataError, setDataError] = useState(false);\n\n    const [activeYear, setActiveYear] = useState(2010); //the default year\n    const [yearData, setYearData] = useState(undefined); //data of all nations of a given year (2010)\n    const [activeCountry, setActiveCountry] = useState(undefined); //the country clicked\n    const [infoCardLayout, setInfoCardLayout] = useState('collapse'); //state containing css class used to hide InfoCard\n    const [bottomCardLayout, setBottomCardLayout] = useState('collapse'); //state containing css class used to hide bottom charts\n    const [infoCardHeightController, setInfoCardHeightController] = useState(''); //state used to apply the 'force-full-height' css class to bottom charts\n    const countryChanged = (country) => {\n        setActiveCountry(country)\n        if (infoCardLayout && bottomCardLayout) {\n            setInfoCardLayout(null);\n            setBottomCardLayout(null);\n        } else {\n            if (!infoCardLayout) setInfoCardLayout(null);\n            if (!bottomCardLayout) setBottomCardLayout(null);\n        }\n    }\n    const yearChanged = (year) => {\n        setIsLoading(true);\n        if (!infoCardLayout) setInfoCardLayout('collapse');\n        if (!bottomCardLayout) setBottomCardLayout('collapse');\n        setActiveYear(year);\n    }\n\n    useEffect(() => {\n        axios\n            .get(global.config.api_url, {\n                params: {\n                    year: activeYear,\n                    strict: \"iso_code\"\n                },\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            .then((res) => {\n                    setYearData(\n                        res.data.sort((a, b) =>\n                            a.iso_code > b.iso_code ? 1 : b.iso_code > a.iso_code ? -1 : 0)\n                    );\n                    if (activeCountry) setActiveCountry(res.data.filter((obj) => activeCountry.iso_code === obj.iso_code)[0])\n                    setIsLoading(false);\n                }\n            )\n            .catch((err) => {\n                console.log(err);\n                setDataError(true);\n            });\n    }, [activeYear]); // eslint-disable-line react-hooks/exhaustive-deps\n    if (dataError) return (\n        <div className='app-loading'>\n            <div>OOPS, we're sorry! We could not load the data from server.</div>\n        </div>\n    );\n    return !isLoading ? (\n        <div className=\"App\">\n            <Map data={{yearMap: activeYear, infoState: yearData}}\n                 countryClicked={countryChanged}\n            />\n            <div className='layout-sizer'>\n                <div id=\"info-card\" className={`reactive ${infoCardHeightController} ${infoCardLayout}`}>\n                    {activeCountry ?\n                        <Card data={activeCountry}/> : null}\n                </div>\n\n                <div id=\"bottom-card\" className={\"reactive \" + bottomCardLayout}>\n                    <div className=\"map-controls\">\n                        <div className=\"slider-container\">\n                            <TimeSlider\n                                year={activeYear}\n                                changeYear={yearChanged}\n                            />\n                        </div>\n                    </div>\n                    {activeCountry ?\n                        <LayoutController\n                            infoCardLayout={infoCardLayout}\n                            bottomCardLayout={bottomCardLayout}\n                            setInfoCardLayout={setInfoCardLayout}\n                            setBottomCardLayout={setBottomCardLayout}\n                            setInfoCardHeightController={setInfoCardHeightController}\n                        /> : null\n                    }\n                    {activeCountry ?\n                        <div className=\"charts\">\n                            <MainChart activeCountry={activeCountry} data={yearData}/>\n                            <SecondaryChart data={activeCountry}/>\n                        </div>\n                        : null\n                    }\n                </div>\n            </div>\n        </div>\n    ) : <div className=\"app-loading\">Loading...</div>;\n}\n\n","import React from \"react\";\nimport {ComposableMap, Geographies, Geography, ZoomableGroup} from \"react-simple-maps\";\nimport {scaleLinear} from \"d3-scale\";\nimport {interpolateCubehelixLong} from \"d3\";\nimport \"./map.css\";\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n//Logarithmic function to assign color to nation, depending on CO2 produced\nconst colorScale = scaleLinear()\n    .domain([0, 100, 1000, 11000])\n    .range([\"lightgreen\", \"lightblue\", \"blue\", \"red\"])\n    .interpolate(interpolateCubehelixLong.gamma(1));\n\n/**\n * Component used to show the world map\n * @param props (contains the nations' data {data} and the setter of activeCountry (countryClicked) )\n * @returns {JSX.Element}\n * @constructor\n */\nconst MapChart = (props) => {\n    return (\n        <div className=\"map-container\" id=\"map-container\">\n            <ComposableMap\n                className=\"composable-map\"\n                data-tip=\"\"\n                projectionConfig={{scale: 650}}\n                width={2000}\n                height={2000}\n            >\n                {props.data.infoState.length > 0 && (\n                    <ZoomableGroup center={[25, -10]}>\n                        <Geographies geography={geoUrl}>\n                            {({geographies}) =>\n                                geographies.map((geo) => {\n                                    const current = props.data.infoState.find(\n                                        (s) => s.iso_code === geo.properties.ISO_A3);\n                                    return (\n                                        <Geography\n                                            key={geo.rsmKey}\n                                            geography={geo}\n                                            onMouseEnter={() => {}}\n                                            onClick={() => {\n                                                props.countryClicked(current);\n                                            }}\n                                            style={{\n                                                default: {\n                                                    // fill: \"#5c6367\",\n                                                    fill: current ? colorScale(current.co2) : \"#fff\",\n                                                    outline: \"none\",\n                                                    stroke: \"#000\",\n                                                    strokeOpacity: 1,\n                                                    strokeWidth: 0.01,\n                                                    transition: \"all 1s ease\",\n                                                },\n                                                hover: {\n                                                    fill: current ? colorScale(current.co2) : \"#fff\",\n                                                    outline: \"none\",\n                                                    stroke: \"#fff\",\n                                                    strokeOpacity: 1,\n                                                    strokeWidth: 2,\n                                                    cursor: \"pointer\",\n                                                },\n                                                pressed: {\n                                                    fill: \"#a0acb3\",\n                                                    outline: \"none\",\n                                                },\n                                            }}\n                                        />\n                                    );\n                                })\n                            }\n                        </Geographies>\n                    </ZoomableGroup>\n                )}\n            </ComposableMap>\n        </div>\n    );\n};\n\nexport default MapChart;\n","import * as React from 'react';\nimport Slider from '@mui/material/Slider';\nimport './timeSlider.css'\n\n/**\n * TimeSlider component used to change the map year, in order to see data in different years\n * @param props (Passing the activeYear and the year handle function)\n * @returns {JSX.Element}\n */\nconst TimeSlider = (props) => {\n    let timeout;\n\n    const marks = [\n        {\n            value: 1950,\n            label: '1950',\n        },\n        {\n            value: 1964,\n            label: '1964',\n        },\n        {\n            value: 1978,\n            label: '1978',\n        },\n        {\n            value: 1992,\n            label: '1992',\n        },\n        {\n            value: 2006,\n            label: '2006',\n        },\n        {\n            value: 2020,\n            label: '2020',\n        },\n    ];\n\n    const updateValue = (value) => {\n        if (typeof value === 'number') {\n            props.changeYear(value);\n        }\n    }\n\n    const handleChange = (event, value) => {\n        timeout && clearTimeout(timeout);\n        timeout = setTimeout(() => {\n            updateValue(value);\n        }, 1000);\n    };\n    return (\n        <Slider\n            sx={{color: 'white'}}\n            className=\"slider\"\n            aria-label=\"Year\"\n            defaultValue={props.year}\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks={marks}\n            min={1950}\n            max={2020}\n            onChange={handleChange}\n        />\n    );\n}\n\nexport default TimeSlider","import React, {useEffect, useState} from \"react\";\nimport \"./secondary_chart.css\";\nimport Chart from \"react-apexcharts\"\nimport {Typography} from \"@mui/material\";\nimport '../../../config'\n\nconst label_formatter = {\n    share_global_cement_co2: \"Cement\",\n    share_global_coal_co2: \"Coal\",\n    share_global_gas_co2: \"Gas\",\n    share_global_oil_co2: \"Oil\",\n    share_global_other_co2: \"Other industry products\"\n}\n\nconst text_color = '#f5f5f5' //whitesmoke\nconst seriesName = \"CO2 part global share\"\n/**\n * SecondaryChart component used for the right chart in the bottom reactive container\n * @param data (activeCountry)\n * @returns {JSX.Element}\n * @constructor\n */\nexport default function SecondaryChart({data}) {\n    const [series, setSeries] = useState([{\n        name: seriesName,\n        data: []\n    }])\n    const options = {\n        tooltip: {\n            show: true,\n            followCursor: true,\n            fillSeriesColor: true,\n            theme: \"dark\",\n            x: {\n                show: true,\n            },\n        },\n        chart: {\n            animations: {\n                enabled: true,\n                easing: \"easeinout\",\n                speed: 400,\n                animateGradually: {\n                    enabled: true,\n                    delay: 550\n                },\n                dynamicAnimation: {\n                    enabled: true,\n                    speed: 1000\n                },\n            },\n            background: 'transparent',\n            toolbar: {\n                show: false,\n            },\n        },\n        theme: {\n            mode: 'dark',\n            palette: 'palette3'\n        },\n        xaxis: {\n            categories: Object.keys(data).filter(key => Object.keys(label_formatter).includes(key)).map(key => label_formatter[key]), //return an array of  CO2 parts global share available\n            // position: \"top\",\n            labels: {\n                show: false,\n                style: {\n                    colors: text_color,\n                    fontSize: '1em',\n                }\n            }\n        },\n        yaxis: {\n            showForNullSeries: false,\n            labels: {\n                style: {\n                    colors: [text_color],\n                    fontSize: '1em'\n                }\n            }\n        },\n        plotOptions: {\n            bar: {\n                dataLabels: {\n                    minAngleToShowLabel: 45,\n                    size: '35%',\n                    background: 'transparent',\n                },\n                distributed: true\n            },\n        },\n        legend: {\n            show: true,\n            labels: {\n                colors: [text_color],\n                fontSize: '1em'\n            }\n        },\n        noData: {\n            text: 'No data available',\n            style: {\n                colors: text_color,\n                fontFamily: 'Roboto'\n            }\n        },\n        dataLabels: {\n            enabled: true,\n            formatter: val => `${val}%`,\n            style: {\n                fontSize: '.7em',\n                colors: [text_color]\n            },\n        }\n    }\n    useEffect(() => {\n        setSeries([{\n            name: seriesName,\n            //return array of CO2 parts global share values which are available\n            data: Object.keys(label_formatter).reduce((values, key) => {\n                if (data[key])\n                    values.push(data[key]);\n                return values;\n            }, [])\n        }])\n    }, [data]);\n\n    return (\n        <div className=\"secondary-chart\">\n            <Typography variant=\"h6\" className=\"chart-title\">\n                Global share of CO2 emissions by industry\n            </Typography>\n            <div className=\"secondary-chart-container\">\n                <Chart\n                    id=\"secondary-chart\"\n                    options={options}\n                    series={series}\n                    type=\"bar\"\n                    height=\"100%\"\n                />\n            </div>\n        </div>\n    )\n}\n\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport \"./main_chart.css\";\nimport '../../../config';\nimport {Typography} from \"@mui/material\";\nimport Chart from \"react-apexcharts\"\n\nconst text_color = '#f5f5f5' //whitesmoke\nconst label_formatter = {\n    trade_co2: \"CO2 by trade\",\n    consumption_co2: \"CO2 products by consumption\"\n}\n\n\n/**\n * MainChart component used for the left chart in the bottom reactive container\n * @returns {JSX.Element} Returns the graphic component.\n */\nconst MainChart = ({activeCountry, data}) => {\n\n    const [series, setSeries] = useState([\n        {\n            name: 'trade_co2',\n            data: []\n        },\n        {\n            name: 'consumption_co2',\n            data: []\n        }\n    ])\n    //filter data to only nation that have iso_code, trade_co2 and consumption_co2\n    let cleanData = data.filter(obj => (obj.iso_code && obj.trade_co2) && obj.consumption_co2)\n\n    //useMemo() => expand calculation. The function is re-called only when cleanData is changed\n\n    //calculate the trade_co2 variance\n    const dynamic_variance_avg_trade_co2 = useMemo(() =>\n            cleanData.map((obj) => obj.trade_co2).reduce((a, b) => Math.abs(a - b), 0) / cleanData.length,\n        [cleanData])\n    const dynamic_variance_trade_co2 = useMemo(() =>\n            Math.abs(activeCountry.trade_co2 - dynamic_variance_avg_trade_co2) / activeCountry.trade_co2 * activeCountry.trade_co2 / 2,\n        [activeCountry, dynamic_variance_avg_trade_co2])\n    // console.log(\"dynamic_variance_trade_co2: \", dynamic_variance_trade_co2)\n\n    //array of country nearby the variance, depending on trade_co2\n    const variance_tolerant_trade_co2 = cleanData.reduce((pV, cV) => {\n        if (Math.abs(activeCountry.trade_co2 - cV.trade_co2) <= dynamic_variance_trade_co2)\n            pV.push(cV)\n        return pV\n    }, [])\n    // console.log(\"Variance tolerant trade_co2: \", variance_tolerant_trade_co2)\n\n    //calculate the consumption_co2 variance. This depends on trade_co2 variance\n    const dynamic_variance_avg_consumption_co2_trade_co2 = useMemo(() =>\n            variance_tolerant_trade_co2.map((obj) => obj.consumption_co2).reduce((a, b) => Math.abs(a - b), 0) /\n            variance_tolerant_trade_co2.length,\n        [variance_tolerant_trade_co2])\n    const dynamic_variance_consumption_co2_trade_co2 = useMemo(() =>\n            Math.abs(activeCountry.consumption_co2 - dynamic_variance_avg_consumption_co2_trade_co2) /\n            activeCountry.consumption_co2 * activeCountry.consumption_co2 / 2,\n        [activeCountry.consumption_co2, dynamic_variance_avg_consumption_co2_trade_co2])\n    // console.log(\"dynamic_variance_consumption_co2_trade_co2: \", dynamic_variance_consumption_co2_trade_co2)\n\n    //array of country nearby the variance, depending on trade_co2 and consumption_co2\n    const variance_tolerant_consumption_co2_trade_co2 = variance_tolerant_trade_co2.reduce((pV, cV) => {\n        if (Math.abs(activeCountry.consumption_co2 - cV.consumption_co2) <= dynamic_variance_consumption_co2_trade_co2)\n            pV.push(cV)\n        return pV\n    }, []).slice(0, 6) // limit max number of countries to 10\n\n    //setting data. Getting 4 random nation and, if activeCountry doesn't have a property, using an empty array\n    let dataFormatted = {\n        country: variance_tolerant_consumption_co2_trade_co2.reduce((pV, cV) => {\n            pV.push(cV.country)\n            return pV\n        }, []),\n        trade_co2: variance_tolerant_consumption_co2_trade_co2.reduce((pV, cV) => {\n            pV.push(cV.trade_co2)\n            return pV\n        }, []),\n        consumption_co2: variance_tolerant_consumption_co2_trade_co2.reduce((pV, cV) => {\n            pV.push(cV.consumption_co2)\n            return pV\n        }, [])\n    }\n\n    //setting legend: select only trade and consumption co2 properties from dataFormatter and formatting it with label formatter\n    let legend = Object.keys((({trade_co2, consumption_co2}) => ({\n        trade_co2,\n        consumption_co2\n    }))(dataFormatted)).map(key => label_formatter[key])\n\n\n    const avg = (dataFormatted.trade_co2.reduce((a, b) => a + b, 0) / dataFormatted.trade_co2.length\n        + dataFormatted.consumption_co2.reduce((a, b) => a + b, 0) / dataFormatted.consumption_co2.length) / 2\n    // console.log(avg)\n\n    const options = {\n        chart: {\n            animations: {\n                enabled: true,\n                easing: \"easeinout\",\n                speed: 400,\n                animateGradually: {\n                    enabled: true,\n                    delay: 550\n                },\n                dynamicAnimation: {\n                    enabled: true,\n                    speed: 1000\n                },\n            },\n            background: 'transparent',\n            toolbar: {\n                show: false,\n            },\n        },\n        theme: {\n            mode: 'dark',\n            palette: 'palette3'\n        },\n        plotOptions: {\n            bar: {\n                horizontal: true,\n                dataLabels: {\n                    minAngleToShowLabel: 45,\n                    size: '35%',\n                    background: 'transparent',\n                },\n            }\n        },\n        dataLabels: {\n            enabled: true,\n            offsetY: 7,\n            textAnchor: 'end',\n            formatter: (val) => {\n                return val > avg ? Math.round(val) + ' Mt' : ''\n            },\n            style: {\n                padding: '.5em',\n                fontSize: '.7em',\n                colors: [text_color]\n            },\n        },\n        stroke: {\n            show: true,\n            width: 1,\n            colors: [text_color]\n        },\n        tooltip: {\n            show: true,\n            followCursor: true,\n            fillSeriesColor: true,\n            theme: \"dark\",\n            x: {\n                show: true,\n            },\n        },\n        xaxis: {\n            categories: dataFormatted.country,\n            labels: {\n                style: {\n                    colors: [text_color],\n                    fontSize: '1em'\n                }\n            }\n        },\n        yaxis: {\n            showForNullSeries: false,\n            labels: {\n                style: {\n                    colors: [text_color],\n                    fontSize: '1em'\n                }\n            }\n        },\n        legend: {\n            show: true,\n            customLegendItems: legend,\n            labels: {\n                colors: [text_color],\n                fontSize: '1em'\n            }\n        },\n        noData: {\n            text: 'No data available',\n            style: {\n                colors: [text_color],\n                fontFamily: 'Roboto'\n            }\n        }\n    }\n\n    useEffect(() => {\n        setSeries([{\n            name: \"CO2 products by trade\",\n            data: dataFormatted.trade_co2\n        }, {\n            name: \"CO2 products by consumption\",\n            data: dataFormatted.consumption_co2\n        }])\n\n    }, [activeCountry]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\n    return (\n        <div className=\"primary-chart\">\n            <Typography variant=\"h6\" className=\"chart-title\">\n                Similar emissions regarding economic activities\n            </Typography>\n            <div className=\"primary-chart-container\">\n                <Chart\n                    id=\"primary-chart\"\n                    options={options}\n                    series={series}\n                    type=\"bar\"\n                    height=\"100%\"\n                />\n            </div>\n            {/*{!dynamic_variance_consumption_co2_trade_co2 ? null :*/}\n            {/*    <div className=\"chart-subtitle\">*/}\n            {/*        <Typography fontStyle='normal' variant='subtitle1'>*/}\n            {/*            {`Variances allowed:`}*/}\n            {/*        </Typography>*/}\n            {/*        <Typography padding=\".5em\" display=\"inline\" fontStyle='italic' variant='subtitle2'>*/}\n            {/*            Trade CO2:*/}\n            {/*            <Typography color='yellow' padding='.2em' display=\"inline\" variant='button'>*/}\n            {/*                <FontAwesomeIcon icon=\"fa-plus-minus\"/>*/}\n            {/*                {`${dynamic_variance_trade_co2.toFixed(2)}`}*/}\n            {/*            </Typography>*/}\n            {/*            Mt*/}\n            {/*        </Typography>*/}\n            {/*        <Typography padding=\".5em\" display=\"inline\" fontStyle='italic' variant='subtitle2'>*/}\n            {/*            Consumption CO2:*/}\n            {/*            <Typography color='yellow' padding='.2em' display=\"inline\" variant='button'>*/}\n            {/*                <FontAwesomeIcon icon=\"fa-plus-minus\"/>*/}\n            {/*                {`${dynamic_variance_consumption_co2_trade_co2.toFixed(2)}`}*/}\n            {/*            </Typography>*/}\n            {/*            Mt*/}\n            {/*        </Typography>*/}\n            {/*    </div>*/}\n            {/*}*/}\n        </div>\n    );\n};\n\nexport default MainChart\n"],"sourceRoot":""}